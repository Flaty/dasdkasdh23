// main.tsx

import '@unocss/reset/tailwind.css';
import './styles/globals.css';
import 'uno.css';
import '@fontsource/inter';

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

// ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π BrowserRouter
import { BrowserRouter } from 'react-router-dom';

import { setUserData } from './utils/user';
import { TransitionDirectionProvider } from "./utils/TransitionDirectionContext";
import { ToastProvider } from "./components/ToastProvider";

import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';

const queryClient = new QueryClient();

// ... (—Ç–≤–æ–π –∫–æ–¥ —Å–æ —Å—Ç–∏–ª—è–º–∏ –∏ —é–∑–µ—Ä–æ–º –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
const style = document.createElement('style');
style.innerHTML = `
  @font-face {
    font-family: 'Satoshi';
    src: url('/fonts/Satoshi-Regular.woff2') format('woff2');
    font-weight: 400;
    font-display: swap;
  }
  @font-face {
    font-family: 'Satoshi';
    src: url('/fonts/Satoshi-Bold.woff2') format('woff2');
    font-weight: 700;
    font-display: swap;
  }
`;
document.head.appendChild(style);

document.body.style.backgroundColor = "#0f0f10";
document.body.style.overflowX = 'hidden';

const userParam = new URLSearchParams(window.location.search).get('user');
if (userParam) {
  try {
    const parsed = JSON.parse(decodeURIComponent(userParam));
    setUserData(parsed);
    window.history.replaceState({}, '', window.location.pathname);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ user –∏–∑ URL', err);
  }
}

try {
  if (window.Telegram && window.Telegram.WebApp) {
    const tg = window.Telegram.WebApp;
    
    // 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∏ —à–∞–ø–∫–∏ –≤ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ü–≤–µ—Ç —Ç–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    // –≠—Ç–æ –Ω–∞–º–µ–∫–Ω–µ—Ç Telegram, —á—Ç–æ –Ω—É–∂–µ–Ω –±–µ—Å—à–æ–≤–Ω—ã–π —Ä–µ–∂–∏–º.
    tg.setHeaderColor('#0a0a0a'); // –¶–≤–µ—Ç —à–∞–ø–∫–∏
    tg.setBackgroundColor('#0a0a0a'); // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –æ–∫–Ω–∞

    // 2. –í—ã–∑—ã–≤–∞–µ–º expand() —Å—Ä–∞–∑—É.
    tg.expand();

    // 3. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –Ω–∞–¥–µ–∂–Ω–æ) –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã "–¥–æ–∂–∞—Ç—å" expand(),
    // –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª —Å—Ä–∞–∑—É –∏–∑-–∑–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
    setTimeout(() => {
      if (!tg.isExpanded) {
        tg.expand();
      }
    }, 150);
  }
} catch (e) {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Web App:", e);
}

// üöÄ –†–µ–Ω–¥–µ—Ä
ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <QueryClientProvider client={queryClient}>
      {/* ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º BrowserRouter –≤–º–µ—Å—Ç–æ HistoryRouter */}
      <BrowserRouter>
        <ToastProvider>
          <TransitionDirectionProvider>
            <App />
          </TransitionDirectionProvider>
        </ToastProvider>
      </BrowserRouter>
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  </React.StrictMode>
);