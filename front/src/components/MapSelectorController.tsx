// src/components/MapSelectorController.tsx
import { Suspense, lazy, useMemo } from "react"; // ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º useMemo
import MapSkeleton from "./MapSkeleton";

const LazyYandexMap = lazy(() => import("./YandexMap"));

interface Point {
  code: string;
  label: string;
}

interface PickupPoint {
  code: string;
  location: { latitude: number; longitude: number; address: string; };
}

interface Props {
  cityCode: string;
  pickupPoints: PickupPoint[];
  selectedPoint: Point | null;
  onPointSelect: (point: { code: string, address: string, coords: [number, number] }) => void;
}

export default function MapSelectorController({
  cityCode, pickupPoints, selectedPoint, onPointSelect
}: Props) {

  if (!cityCode || !pickupPoints?.length) {
    return <MapSkeleton />;
  }

  // üî•üî•üî• –ì–õ–ê–í–ù–´–ô –§–ò–ö–° –í–°–ï–ô –ù–ê–®–ï–ô –≠–ü–û–ü–ï–ò üî•üî•üî•
  // –ú—ã –º–µ–º–æ–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ `mapPoints`.
  // –û–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –¢–û–õ–¨–ö–û —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è `pickupPoints` (—Ç.–µ. –ø—Ä–∏ —Å–º–µ–Ω–µ –≥–æ—Ä–æ–¥–∞).
  // –ü—Ä–∏ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–∞—Ö (–∫–ª–∏–∫ –Ω–∞ –º–µ—Ç–∫—É) `useMemo` –≤–µ—Ä–Ω–µ—Ç —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –º–∞—Å—Å–∏–≤–∞.
  const mapPoints = useMemo(() => {
    return pickupPoints.map((p) => ({
      coords: [p.location.latitude, p.location.longitude] as [number, number],
      label: p.location.address,
      code: p.code,
    }));
  }, [pickupPoints]); // ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å - —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

  return (
    <Suspense fallback={<MapSkeleton />}>
      <LazyYandexMap
        points={mapPoints} // –¢–µ–ø–µ—Ä—å —Å—é–¥–∞ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–ø
        onSelect={onPointSelect}
        selectedCode={selectedPoint?.code || null}
      />
    </Suspense>
  );
}