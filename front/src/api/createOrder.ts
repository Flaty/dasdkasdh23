// api/createOrder.ts

import { fetchWithAuth } from './fetchWithAuth';
import type { CreateOrderPayload } from "../utils/types";

export async function createOrder(payload: CreateOrderPayload) {
  const res = await fetchWithAuth("/api/orders", {
    method: "POST",
    body: JSON.stringify(payload),
  });

  if (!res.ok) {
    const errorData = await res.json().catch(() => ({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑' }));
    throw new Error(errorData.message);
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
  const orderData = await res.json();

  // üî•üî•üî• –ì–õ–ê–í–ù–´–ô –§–ò–ö–° –ó–î–ï–°–¨ üî•üî•üî•
  // –ï—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª ID, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ localStorage.
  if (orderData && orderData.id) {
    localStorage.setItem('unpaidOrderId', orderData.id);
    localStorage.setItem('unpaidOrderStatus', 'awaiting_payment'); // –ò —Å—Ç–∞—Ç—É—Å —Ç–æ–∂–µ, –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä —Å–∫—Ä—ã—Ç–∏—è –±–∞–Ω–Ω–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    localStorage.removeItem('bannerDismissedUntil'); 
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞–ª—å—à–µ, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
  return orderData;
}