// src/App.tsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø C –¢–ò–ü–ê–ú–ò
import { useState, useEffect } from "react";
import { Routes, Route, useLocation, Navigate } from "react-router-dom";

import { setUserData, clearUserData } from './utils/user';
import Calc from "./pages/Calc";
import Profile from "./pages/Profile";
import OrdersPage from "./pages/OrdersPage";
import TabBarLayout from "./layouts/TabBarLayout";

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø—ã –¥–ª—è –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
interface ExtendedWebApp {
  isExpanded: boolean;
  initData: string;
  initDataUnsafe: {
    user?: {
      id: number;
      first_name: string;
      last_name?: string;
      username?: string;
      language_code?: string;
      allows_write_to_pm?: boolean;
      photo_url?: string;
    };
    start_param?: string;
  };
  ready(): void;
  expand(): void;
  close(): void;
  setHeaderColor(color: string): void;
  setBackgroundColor(color: string): void;
  enableClosingConfirmation(): void;
  disableClosingConfirmation(): void;
  enableVerticalSwipes(): void;
  disableVerticalSwipes(): void;
  viewportHeight: number;
  viewportStableHeight: number;
  onEvent(eventType: string, callback: () => void): void;
  offEvent(eventType: string, callback: () => void): void;
  HapticFeedback: {
    impactOccurred(style: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft'): void;
    notificationOccurred(type: 'error' | 'success' | 'warning'): void;
    selectionChanged(): void;
  };
  openTelegramLink: (url: string) => void;
}

declare global {
  interface Window {
    Telegram?: {
      WebApp: ExtendedWebApp;
    };
  }
}

const LoadingScreen = () => (
  <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100vh', color: 'white', backgroundColor: '#0f0f10' }}>
    –ó–∞–≥—Ä—É–∑–∫–∞...
  </div>
);

const ErrorScreen = ({ message }: { message: string }) => (
   <div style={{ padding: '2rem', textAlign: 'center', color: 'white', backgroundColor: '#a00', fontFamily: 'sans-serif', height: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
    <div>
      <h1 style={{ fontSize: '1.5rem', fontWeight: 'bold' }}>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h1>
      <p style={{ marginTop: '1rem', lineHeight: '1.5' }}>{message}</p>
    </div>
  </div>
);

/**
 * –û–∂–∏–¥–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp —Å –Ω–µ–±–æ–ª—å—à–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º.
 * @param {number} timeout - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
 * @returns {Promise<ExtendedWebApp>} - –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è —Å –æ–±—ä–µ–∫—Ç–æ–º Telegram.WebApp.
 */
const waitForTelegram = (timeout = 3000): Promise<ExtendedWebApp> => {
  return new Promise((resolve, reject) => {
    let attempts = 0;
    const interval = 100;
    const maxAttempts = timeout / interval;

    const check = () => {
      if (window.Telegram?.WebApp?.initData) {
        resolve(window.Telegram.WebApp);
      } else if (attempts < maxAttempts) {
        attempts++;
        setTimeout(check, interval);
      } else {
        if (window.Telegram?.WebApp) {
            reject(new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –∫–Ω–æ–ø–∫—É –≤ –±–æ—Ç–µ Telegram."));
        } else {
            reject(new Error("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω—É—Ç—Ä–∏ Telegram. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç."));
        }
      }
    };
    check();
  });
};


export default function App() {
  const location = useLocation();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const initializeApp = async () => {
      try {
        const tg = await waitForTelegram();
        
        // üî•üî•üî• –ù–ê–ß–ê–õ–û –•–ê–ö–ê "–•–ò–¢–†–´–ô –†–ï–î–ò–†–ï–ö–¢" üî•üî•üî•
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∞ —É—Å–ª–æ–≤–∏—è:
        // 1. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ù–ï –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ (—Ç.–µ. –æ—Ç–∫—Ä—ã—Ç–æ –≤ —à—Ç–æ—Ä–∫–µ)
        // 2. –£ –Ω–∞—Å –ù–ï–¢ start_param (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤)
        if (!tg.initDataUnsafe.start_param) {
            // ...–ù–û –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ window.location...
            // window.location.href = `https://t.me/ariyaappbot?startapp=force_fullscreen`;

            // ...–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô, –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ Telegram API.
            // –≠—Ç–æ –ø—Ä–∏–∫–∞–∑ —Å–∞–º–æ–º—É –∫–ª–∏–µ–Ω—Ç—É, –∞ –Ω–µ –±—Ä–∞—É–∑–µ—Ä—É. –û–Ω –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
            tg.openTelegramLink(`https://t.me/ariyaappbot?startapp=force_fullscreen`);
            
            // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫.
            return;
        }
        // üî•üî•üî• –ö–û–ù–ï–¶ –•–ê–ö–ê üî•üî•üî•

        // –ï—Å–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª—Å—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        tg.ready();
        tg.expand(); // –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Å–µ –µ—â–µ –Ω—É–∂–Ω–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
        tg.setHeaderColor('secondary_bg_color'); 
        tg.setBackgroundColor('#0a0a0a');
        tg.enableClosingConfirmation();
        
        if (typeof tg.enableVerticalSwipes === 'function') {
          tg.enableVerticalSwipes();
        }

        const response = await fetch('/api/auth/verify', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ initData: tg.initData }),
        });
        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å—Ç–∞—Ç—É—Å: ${response.status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`);
        }
        const data = await response.json();
        localStorage.setItem('jwt_token', data.token);
        
        if (tg.initDataUnsafe.user) {
            setUserData(tg.initDataUnsafe.user);
        }

      } catch (e: unknown) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", e);
        clearUserData();
        if (e instanceof Error) {
          setError(e.message);
        } else {
          setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.");
        }
      } finally {
        setIsLoading(false);
      }
    };

    initializeApp();
  }, []);

  if (isLoading) {
    return <LoadingScreen />;
  }

  if (error) {
    return <ErrorScreen message={error} />;
  }

  return (
    // AnimatePresence –ø–µ—Ä–µ–µ—Ö–∞–ª –≤ TabBarLayout, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω.
    // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∞ –Ω–µ –≤—Å–µ–≥–æ layout'–∞ –≤–º–µ—Å—Ç–µ —Å TabBar.
    <Routes location={location} key={location.key}>
      <Route element={<TabBarLayout />}>
        {/* –ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å */}
        <Route path="/" element={<Navigate to="/profile" replace />} />
        
        {/* 
          –°—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–ø–µ—Ä—å —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é.
          –û–±–µ—Ä—Ç–∫–∞ PageWrapperFade –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ TabBarLayout
          —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç motion.div, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é
          –ø–æ—è–≤–ª–µ–Ω–∏—è/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è Outlet'–∞.
        */}
        <Route path="/calc" element={<Calc />} />
        <Route path="/profile" element={<Profile />} />
        <Route path="/cart" element={<OrdersPage />} />
      </Route>
    </Routes>
  );
}