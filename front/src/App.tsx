// src/App.tsx - –ü–û–°–õ–ï–î–ù–Ø–Ø –í–ï–†–°–ò–Ø
import { useState, useEffect } from "react";
import { Routes, Route, useLocation, Navigate } from "react-router-dom";
import { AnimatePresence } from "framer-motion";

import { setUserData, clearUserData } from './utils/user';
import Calc from "./pages/Calc";
import Profile from "./pages/Profile";
import OrdersPage from "./pages/OrdersPage";
import PageWrapperFade from "./components/PageWrapperFade";
import TabBarLayout from "./layouts/TabBarLayout";

const LoadingScreen = () => (
  <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100vh', color: 'white', backgroundColor: '#0f0f10' }}>
    –ó–∞–≥—Ä—É–∑–∫–∞...
  </div>
);

const ErrorScreen = ({ message }: { message: string }) => (
   <div style={{ padding: '2rem', textAlign: 'center', color: 'white', backgroundColor: '#a00', fontFamily: 'sans-serif', height: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
    <div>
      <h1 style={{ fontSize: '1.5rem', fontWeight: 'bold' }}>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h1>
      <p style={{ marginTop: '1rem' }}>{message}</p>
    </div>
  </div>
);

export default function App() {
  const location = useLocation();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const initializeApp = async () => {
      const tg = window.Telegram?.WebApp as any;

      if (!tg || !tg.initData) {
        setError("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω—É—Ç—Ä–∏ Telegram.");
        setIsLoading(false);
        clearUserData();
        return;
      }
      
      // üî•üî•üî• –§–ò–ù–ê–õ–¨–ù–´–ô –§–ò–ö–° –®–¢–û–†–ö–ò üî•üî•üî•
      // –°–ù–ê–ß–ê–õ–ê –æ—Ç–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã UI, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –ú–ì–ù–û–í–ï–ù–ù–û.
      tg.ready();
      tg.expand(); // <--- –°–ê–ú–ê–Ø –ì–õ–ê–í–ù–ê–Ø –ö–û–ú–ê–ù–î–ê. –í–´–ó–´–í–ê–ï–ú –°–†–ê–ó–£.
      tg.setHeaderColor('secondary_bg_color');
      tg.setBackgroundColor('#0a0a0a');
      tg.enableClosingConfirmation();

      // –ê –ü–û–¢–û–ú —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É —Å —Å–µ—Ç—å—é.
      try {
        const response = await fetch('/api/auth/verify', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ initData: tg.initData }),
        });
        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å—Ç–∞—Ç—É—Å: ${response.status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`);
        }
        const data = await response.json();
        localStorage.setItem('jwt_token', data.token);
        
        setUserData(tg.initDataUnsafe.user);

      } catch (e: unknown) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", e);
        if (e instanceof Error) {
          setError(e.message);
        } else {
          setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.");
        }
        clearUserData();
      } finally {
        setIsLoading(false);
      }
    };

    initializeApp();
  }, []);

  if (isLoading) {
    return <LoadingScreen />;
  }

  if (error) {
    return <ErrorScreen message={error} />;
  }

  return (
    <AnimatePresence mode="wait" initial={false}>
      <Routes location={location} key={location.key}>
        <Route element={<TabBarLayout />}>
          <Route path="/" element={<Navigate to="/profile" replace />} />
          <Route path="/calc" element={<PageWrapperFade><Calc /></PageWrapperFade>} />
          <Route path="/profile" element={<PageWrapperFade><Profile /></PageWrapperFade>} />
          <Route path="/cart" element={<PageWrapperFade scrollable><OrdersPage /></PageWrapperFade>} />
        </Route>
      </Routes>
    </AnimatePresence>
  );
}