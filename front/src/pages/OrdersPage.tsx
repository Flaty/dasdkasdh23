// src/pages/OrdersPage.tsx

import { useEffect, useState, useRef } from "react";
// ‚ú® 1. –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ù–ê–® –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´–ô FETCH
import { fetchWithAuth } from "../api/fetchWithAuth"; 
import BottomSheet, { type BottomSheetHandle } from "../components/BottomSheet"; 
import { OrderCard } from "../components/ui/Card"
import OrderDetails from "../components/OrderDetails"; 
import type { Order } from '../utils/types'; //


const statusLabels: Record<string, string> = {
  pending: "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
  awaiting_payment: "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
  paid: "–í—ã–∫—É–ø–∞–µ—Ç—Å—è",
  to_warehouse: "–ï–¥–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ö–∏—Ç–∞–µ",
  at_warehouse: "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–∏—Ç–∞–µ",
  to_moscow: "–ï–¥–µ—Ç –≤ –ú–æ—Å–∫–≤—É",
  in_moscow: "–í –ú–æ—Å–∫–≤–µ",
  shipped_cdek: "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –°–î–≠–ö",
  ready_for_pickup: "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
  completed: "–ó–∞–≤–µ—Ä—à–µ–Ω",
  rejected: "–û—Ç–∫–ª–æ–Ω–µ–Ω",
};

const getStatusLabel = (status: string) => statusLabels[status] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å";

const formatDate = (dateStr: string): string => {
  const date = new Date(dateStr);
  return date.toLocaleDateString("ru-RU", { day: "2-digit", month: "2-digit", year: "numeric" });
};

const activeStatuses = ['pending', 'awaiting_payment', 'paid', 'to_warehouse', 'at_warehouse', 'to_moscow', 'in_moscow', 'shipped_cdek'];
const readyStatuses = ['ready_for_pickup'];
const archiveStatuses = ['completed', 'rejected'];

export default function OrdersPage() {
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  const [statusFilter, setStatusFilter] = useState<'active' | 'ready' | 'archive'>('active');

  const detailsSheetRef = useRef<BottomSheetHandle>(null);
  const [isDetailsOpen, setIsDetailsOpen] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);

  useEffect(() => {
    async function fetchOrders() {
      try {
        // ‚ú® 3. –ò–°–ü–û–õ–¨–ó–£–ï–ú FETCH –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô
        const res = await fetchWithAuth('/api/orders');
        const data = await res.json();
        setOrders(data);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤", err);
      } finally {
        setLoading(false);
      }
    }
    fetchOrders();
  }, []);

  useEffect(() => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  }, [statusFilter]);

  // –Ø –í–ï–†–ù–£–õ –¢–í–û–Æ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–£–Æ –õ–û–ì–ò–ö–£ –ö–õ–ò–ö–ê. –û–ù–ê –ë–£–î–ï–¢ –†–ê–ë–û–¢–ê–¢–¨.
  const handleOrderClick = (order: Order) => {
    setSelectedOrder(order);
    setIsDetailsOpen(true);
  };

  const filteredOrders = orders.filter(order => {
    if (statusFilter === 'active') return activeStatuses.includes(order.status);
    if (statusFilter === 'ready') return readyStatuses.includes(order.status);
    if (statusFilter === 'archive') return archiveStatuses.includes(order.status);
    return true;
  });

  const sortedOrders = filteredOrders.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());

 return (
    <>
      {/* –Ø –£–ë–†–ê–õ –°–í–û–ò –õ–ò–®–ù–ò–ï –û–ë–ï–†–¢–ö–ò. –¢–ï–ü–ï–†–¨ –¢–í–û–ô –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ó–ê–ô–ù. */}
      <div className="px-4 pb-4 space-y-4">
        <div className="flex flex-col gap-4">
          <h1 className="text-ui-h1">–ú–æ–∏ –∑–∞–∫–∞–∑—ã</h1>

          <div className="pt-1 pb-2">
            <div className="flex gap-2 text-sm font-medium">
                {/* ...—Ç–≤–æ–∏ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤... */}
                <button onClick={() => setStatusFilter('active')} className={`px-4 py-1.5 rounded-full border border-white/10 transition-all duration-200 ${statusFilter === 'active' ? "bg-white text-black shadow-sm" : "text-white/40 hover:bg-white/10"}`}>–ê–∫—Ç–∏–≤–Ω—ã–µ</button>
                <button onClick={() => setStatusFilter('ready')} className={`px-4 py-1.5 rounded-full border border-white/10 transition-all duration-200 ${statusFilter === 'ready' ? "bg-white text-black shadow-sm" : "text-white/40 hover:bg-white/10"}`}>–ö –≤—ã–¥–∞—á–µ</button>
                <button onClick={() => setStatusFilter('archive')} className={`px-4 py-1.5 rounded-full border border-white/10 transition-all duration-200 ${statusFilter === 'archive' ? "bg-white text-black shadow-sm" : "text-white/40 hover:bg-white/10"}`}>–ê—Ä—Ö–∏–≤</button>
            </div>
          </div>

          {loading ? (
            <p className="text-sm text-white/40 px-1">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          ) : sortedOrders.length === 0 ? (
            <p className="text-sm text-white/40 mt-8 text-center">üôÉ –ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—É—Å—Ç–æ</p>
          ) : (
            <div className="flex flex-col gap-3">
              {sortedOrders.map((order) => {
                // ‚ú® 4. –ì–õ–ê–í–ù–´–ô –§–ò–ö–° –û–®–ò–ë–ö–ò. –ë–ï–ó –õ–ò–®–ù–ò–• –ò–ó–ú–ï–ù–ï–ù–ò–ô.
                const displayId = order.publicId || ''; // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
                
                return (
                  <OrderCard
                    key={order._id} // –ò—Å–ø–æ–ª—å–∑—É–µ–º _id –æ—Ç Mongo, –æ–Ω 100% —É–Ω–∏–∫–∞–ª–µ–Ω
                    orderNumber={displayId} // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –∫—Ä–∞—Å–∏–≤—ã–π ID, –±–µ–∑ .slice()
                    status={getStatusLabel(order.status)}
                    date={formatDate(order.createdAt)}
                    category={order.shipping === "air" ? "‚úàÔ∏è –ê–≤–∏–∞ –¥–æ—Å—Ç–∞–≤–∫–∞" : "üöö –û–±—ã—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞"}
                    price={order.price}
                    onClick={() => handleOrderClick(order)}
                  />
                );
              })}
            </div>
          )}
        </div>
      </div>
      
      {/* –¢–í–û–ô –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô BOTTOMSHEET –° –¢–í–û–ï–ô –õ–û–ì–ò–ö–û–ô. –û–ù –ë–£–î–ï–¢ –†–ê–ë–û–¢–ê–¢–¨. */}
      {selectedOrder && (
        <BottomSheet
          ref={detailsSheetRef}
          title="–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"
          open={isDetailsOpen}
          onClose={() => setIsDetailsOpen(false)}
        >
          <OrderDetails order={selectedOrder} />
        </BottomSheet>
      )}
    </>
  );
}