// src/pages/OrdersPage.tsx

import { useEffect, useState } from "react";
import { getUserData } from "../utils/user";
import { useRef } from "react";
import BottomSheet, { type BottomSheetHandle } from "../components/BottomSheet"; 
import { OrderCard } from "../components/ui/Card"
import OrderDetails from "../components/OrderDetails"; 

interface Order {
  id: string;
  category: string;
  shipping: string;
  price: number;
  status: string; // –≠—Ç–æ –±—É–¥–µ—Ç –∫–ª—é—á, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'awaiting_payment'
  createdAt: string;
}

// ‚úÖ 1. –°–æ–∑–¥–∞–µ–º "—Å–ª–æ–≤–∞—Ä—å" –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤. 
// –ö–ª—é—á - —Å—Ç–∞—Ç—É—Å —Å –±—ç–∫–µ–Ω–¥–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
const statusLabels: Record<string, string> = {
  pending: "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
  awaiting_payment: "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
  paid: "–í—ã–∫—É–ø–∞–µ—Ç—Å—è",
  to_warehouse: "–ï–¥–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ö–∏—Ç–∞–µ",
  at_warehouse: "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–∏—Ç–∞–µ",
  to_moscow: "–ï–¥–µ—Ç –≤ –ú–æ—Å–∫–≤—É",
  in_moscow: "–í –ú–æ—Å–∫–≤–µ",
  shipped_cdek: "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –°–î–≠–ö",
  ready_for_pickup: "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
  completed: "–ó–∞–≤–µ—Ä—à–µ–Ω",
  rejected: "–û—Ç–∫–ª–æ–Ω–µ–Ω",
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–µ–π–±–ª–∞, —Å —Ñ–æ–ª–±—ç–∫–æ–º –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
const getStatusLabel = (status: string) => statusLabels[status] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å";

const formatDate = (dateStr: string): string => {
  const date = new Date(dateStr);
  return date.toLocaleDateString("ru-RU", {
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
  });
};

// ‚úÖ 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
const activeStatuses = ['pending', 'awaiting_payment', 'paid', 'to_warehouse', 'at_warehouse', 'to_moscow', 'in_moscow', 'shipped_cdek'];
const readyStatuses = ['ready_for_pickup'];
const archiveStatuses = ['completed', 'rejected'];

export default function OrdersPage() {
  const user = getUserData();
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  // ‚úÖ 3. –¢–µ–ø–µ—Ä—å —Ñ–∏–ª—å—Ç—Ä - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ 'active', 'ready' –∏–ª–∏ 'archive'
  const [statusFilter, setStatusFilter] = useState<'active' | 'ready' | 'archive'>('active');


  const detailsSheetRef = useRef<BottomSheetHandle>(null);
  const [isDetailsOpen, setIsDetailsOpen] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);

  useEffect(() => {
    async function fetchOrders() {
      if (!user) return;
      try {
        const res = await fetch(`http://localhost:3001/api/orders?userId=${user.id}`);
        const data = await res.json();
        setOrders(data);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤", err);
      } finally {
        setLoading(false);
      }
    }
    fetchOrders();
  }, [user]);

  useEffect(() => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  }, [statusFilter]);

  const handleOrderClick = (order: Order) => {
    setSelectedOrder(order);
    setIsDetailsOpen(true);
  };

  // ‚úÖ 4. –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const filteredOrders = orders.filter(order => {
    if (statusFilter === 'active') return activeStatuses.includes(order.status);
    if (statusFilter === 'ready') return readyStatuses.includes(order.status);
    if (statusFilter === 'archive') return archiveStatuses.includes(order.status);
    return true; // –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω
  });

  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –¥–∞—Ç–µ
  const sortedOrders = filteredOrders.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());

 return (
    // ‚úÖ –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ –≤ React-—Ñ—Ä–∞–≥–º–µ–Ω—Ç
    <>
      <div className="relative min-h-screen bg-[#0a0a0a] text-white px-4 pt-[calc(env(safe-area-inset-top,0px)+16px)] overflow-hidden no-scrollbar">
        <div className="flex flex-col gap-4">
          <h1 className="text-ui-h1">–ú–æ–∏ –∑–∞–∫–∞–∑—ã</h1>

          {/* –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
          <div className="bg-[#0f0f10] pt-1 pb-2">
            <div className="flex gap-2 text-sm font-medium">
              <button
                onClick={() => setStatusFilter('active')}
                className={`px-4 py-1.5 rounded-full border border-white/10 transition-all duration-200 ${
                  statusFilter === 'active' ? "bg-white text-black shadow-sm" : "text-white/40 hover:bg-white/10"
                }`}
              >
                –ê–∫—Ç–∏–≤–Ω—ã–µ
              </button>
              <button
                onClick={() => setStatusFilter('ready')}
                className={`px-4 py-1.5 rounded-full border border-white/10 transition-all duration-200 ${
                  statusFilter === 'ready' ? "bg-white text-black shadow-sm" : "text-white/40 hover:bg-white/10"
                }`}
              >
                –ö –≤—ã–¥–∞—á–µ
              </button>
              <button
                onClick={() => setStatusFilter('archive')}
                className={`px-4 py-1.5 rounded-full border border-white/10 transition-all duration-200 ${
                  statusFilter === 'archive' ? "bg-white text-black shadow-sm" : "text-white/40 hover:bg-white/10"
                }`}
              >
                –ê—Ä—Ö–∏–≤
              </button>
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ */}
          {loading ? (
            <p className="text-sm text-white/40 px-1">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          ) : sortedOrders.length === 0 ? (
            <p className="text-sm text-white/40 mt-8 text-center">
              üôÉ –ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—É—Å—Ç–æ
            </p>
          ) : (
            <div className="flex flex-col gap-3">
              {sortedOrders.map((order, i) => (
                <OrderCard
                  key={order.id}
                  orderNumber={order.id.slice(-6)}
                  status={getStatusLabel(order.status)}
                  date={formatDate(order.createdAt)}
                  category={order.shipping === "air" ? "‚úàÔ∏è –ê–≤–∏–∞ –¥–æ—Å—Ç–∞–≤–∫–∞" : "üöö –û–±—ã—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞"}
                  price={order.price}
                  onClick={() => handleOrderClick(order)}
                  className="fade-in"
                  style={{
                    animationDelay: `${i * 40}ms`,
                    animationFillMode: "both",
                    animationName: "fadeIn",
                    animationDuration: "0.35s",
                    animationTimingFunction: "ease-out",
                  }}
                />
              ))}
            </div>
          )}
        </div>
      </div>

      {/* 
        ‚úÖ –í–æ—Ç –∫—É–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è BottomSheet.
        –û–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º div'–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
      */}
      {selectedOrder && (
        <BottomSheet
          ref={detailsSheetRef}
          title="–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"
          open={isDetailsOpen}
          onClose={() => setIsDetailsOpen(false)}
        >
          <OrderDetails order={selectedOrder} />
        </BottomSheet>
      )}
    </>
  );
}