name: Build and Deploy to Production

on:
  push:
    branches: [ "main" ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  BACKEND_IMAGE_NAME: my-tg-app-backend
  NGINX_IMAGE_NAME: my-tg-app-nginx

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest

      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.nginx
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.NGINX_IMAGE_NAME }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Переходим в рабочую директорию
            cd /root/my-tg-app

            # ✅ ИСПОЛЬЗУЕМ HEREDOC. Это пуленепробиваемый способ записи многострочных данных.
            
            # Записываем .env.prod
            cat > .env.prod << 'EOF'
            ${{ secrets.ENV_FILE_CONTENT }}
            EOF

            # Записываем docker-compose.prod.yml
            cat > docker-compose.prod.yml << 'EOF'
            ${{ secrets.COMPOSE_PROD_YML_CONTENT }}
            EOF

            # Проверяем, что файлы не пустые. Если что-то пошло не так, скрипт упадет.
            if [ ! -s .env.prod ]; then echo "ERROR: .env.prod is empty after write!" >&2; exit 1; fi
            if [ ! -s docker-compose.prod.yml ]; then echo "ERROR: docker-compose.prod.yml is empty after write!" >&2; exit 1; fi

            # Запускаем docker-compose с флагом --env-file
            docker-compose --env-file .env.prod -f docker-compose.prod.yml pull
            docker-compose --env-file .env.prod -f docker-compose.prod.yml up -d --remove-orphans
            docker image prune -af