// backend/server.js
import mongoose from "mongoose";
import app, { bot, logger } from './app.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞
import Order from './models/Order.js'; 
import { Markup } from 'telegraf';
import { statusLabels, escapeMarkdown } from './utils/botHelpers.js'; // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —Ç—ã –≤—ã–Ω–µ—Å–µ—à—å —Ö–µ–ª–ø–µ—Ä—ã —Å—é–¥–∞

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
const { MANAGER_CHAT_ID, WEBAPP_URL, JWT_SECRET, DATABASE_URL, PORT = 3001 } = process.env;

if (!JWT_SECRET || !bot.token || !MANAGER_CHAT_ID) {
  logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env!");
  process.exit(1);
}

// --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ---
mongoose.connect(DATABASE_URL || "mongodb://127.0.0.1:27017/orders")
  .then(() => logger.info("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"))
  .catch((err) => logger.error({ err }, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB"));
mongoose.connection.on('error', err => logger.error({ err }, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB'));
mongoose.connection.on('disconnected', () => logger.warn('MongoDB –æ—Ç–∫–ª—é—á–µ–Ω–∞.'));


// --- –õ–æ–≥–∏–∫–∞ Telegram Bot ---
// (–õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Ç–µ—Å–Ω–æ —Å–≤—è–∑–∞–Ω–∞ —Å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Ä–≤–µ—Ä–∞)
bot.command('start', (ctx) => {
  if (!WEBAPP_URL) return ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
  ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', Markup.inlineKeyboard([Markup.button.webApp('üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', WEBAPP_URL)]));
});
bot.on("callback_query", async (ctx) => {
  const data = ctx.callbackQuery.data;
  if (!data.startsWith('status_')) return ctx.answerCbQuery();
  const parts = data.split("_");
  const orderId = parts[parts.length - 1]; 
  const newStatus = parts.slice(1, -1).join('_');

  try {
    if (!mongoose.Types.ObjectId.isValid(orderId)) return ctx.answerCbQuery('‚ùóÔ∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞');
    const order = await Order.findById(orderId);
    if (!order) return ctx.answerCbQuery("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ");
    order.status = newStatus;
    await order.save();
    const originalText = ctx.callbackQuery.message.text;
    const updatedText = originalText.replace(/\*–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:.*$/, `*–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${escapeMarkdown(statusLabels[newStatus] || newStatus)}*`);
    if (updatedText !== originalText) {
        await ctx.editMessageText(updatedText, { parse_mode: 'MarkdownV2', ...ctx.callbackQuery.message.reply_markup });
    }
    ctx.answerCbQuery(`‚úÖ –°—Ç–∞—Ç—É—Å: ${statusLabels[newStatus]}`);
  } catch (err) {
      logger.error({ err }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞');
      ctx.answerCbQuery('‚ùóÔ∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
  }
});


// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ Graceful Shutdown ---
// === 6. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö –ò GRACEFUL SHUTDOWN ===

let server;
const shutdown = async (signal) => {
  logger.info(`${signal} received, shutting down gracefully`);
  
  // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  bot.stop(signal);
  
  // 2. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª –Ω–æ–≤—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
  if (server) {
    server.close(async () => {
      logger.info('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
      
      // 3. –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–∞–∑—ã
      await mongoose.connection.close(false);
      logger.info('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
      
      // 4. –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞
      process.exit(0);
    });
  } else {
    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
    process.exit(0);
  }
};
process.on('SIGTERM', () => shutdown('SIGTERM'));
process.on('SIGINT', () => shutdown('SIGINT'));

// === 7. –ó–ê–ü–£–°–ö ===
async function startServer() {
  try {
    logger.info("‚ÑπÔ∏è –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ...");
    bot.botInfo = await bot.telegram.getMe();
    logger.info(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞: @${bot.botInfo.username}`);
    
    if (WEBAPP_URL) {
      await bot.telegram.setChatMenuButton({ menu_button: { type: "web_app", text: "–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app: { url: WEBAPP_URL } } });
      logger.info("‚úÖ Chat Menu Button —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
    
    server = app.listen(3001, () => {
      logger.info("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3001");
      logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...");
      bot.launch();
    });
  } catch (err) {
    logger.error({ err }, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞");
    process.exit(1);
  }
}

startServer();