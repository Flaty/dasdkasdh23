// backend/routes/profile.js

import express from 'express';
import User from '../models/User.js';
import Order from '../models/Order.js';
import UserAddress from '../models/UserAddress.js';

export default function createProfileRouter({ bot, logger }) {
  const router = express.Router();

  // GET /api/profile
  router.get('/', async (req, res) => {
    const userId = req.user.userId;
    if (!userId) {
      // –≠—Ç–æ—Ç –∫–µ–π—Å –ø–æ—á—Ç–∏ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –∏–∑-–∑–∞ authenticateToken, –Ω–æ —ç—Ç–æ —Ö–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
      return res.status(401).json({ error: "User not authenticated" });
    }

    try {
      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const dbUser = await User.findOneAndUpdate(
        { userId },
        { $setOnInsert: { userId, username: req.user.username } },
        { new: true, upsert: true }
      );

      if (!dbUser) {
        return res.status(404).json({ error: "User not found" });
      }
      
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const [lastOrder, allOrders, userAddress] = await Promise.all([
        Order.findOne({ userId }).sort({ createdAt: -1 }),
        Order.find({ userId }),
        UserAddress.findOne({ userId })
      ]);
      
      // --- –†–∞—Å—á–µ—Ç—ã –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ ---
      const registrationDate = dbUser.createdAt;
      const daysInEcosystem = registrationDate ? Math.floor((new Date() - new Date(registrationDate)) / (1000 * 60 * 60 * 24)) : 0;
      const ordersCount = allOrders.length;
      const totalSpent = allOrders.reduce((sum, order) => sum + (order.price || 0), 0);

      // –õ–æ–≥–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
      let loyalty_status;
      if (ordersCount >= 10) {
        loyalty_status = { name: "Gold", icon: "ü•á", next_status_name: null, orders_to_next_status: 0, progress_percentage: 100, current_cashback_percent: 5, perks: ["+5% –∫—ç—à–±—ç–∫", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"] };
      } else if (ordersCount >= 5) {
        loyalty_status = { name: "Silver", icon: "ü•à", next_status_name: "Gold", orders_to_next_status: 10 - ordersCount, progress_percentage: ((ordersCount - 5) / 5) * 100, current_cashback_percent: 2, perks: ["+2% –∫—ç—à–±—ç–∫", "–†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ —Å–∫–∏–¥–∫–∞–º"] };
      } else {
        loyalty_status = { name: "Bronze", icon: "ü•â", next_status_name: "Silver", orders_to_next_status: 5 - ordersCount, progress_percentage: (ordersCount / 5) * 100, current_cashback_percent: 0, perks: ["–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫–∞–∑–∞–º"] };
      }
      
      // –õ–æ–≥–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      const achievements = [
        { id: "first_purchase", name: "–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞", icon: "üçÜ", is_completed: ordersCount > 0 },
        { id: "five_orders", name: "5 –∑–∞–∫–∞–∑–æ–≤", icon: "üî•", is_completed: ordersCount >= 5 },
        { id: "spent_30k", name: "30k+ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ", icon: "üßæ", is_completed: totalSpent >= 30000 }
      ];

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
      const botUsername = bot.botInfo?.username || 'your_bot'; 
      
      // –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
      const profileData = {
        days_in_ecosystem: daysInEcosystem,
        loyalty_status,
        last_order: lastOrder ? lastOrder.toObject() : null,
        achievements,
        address: userAddress,
        referral_info: { 
          link: `https://t.me/${botUsername}?start=ref${userId}`, 
          is_active: true, 
          bonus_per_friend: 500 
        }
      };

      res.json(profileData);

    } catch (err) {
      logger.error({ err, userId }, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è");
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø—Ä–æ—Ñ–∏–ª—è" });
    }
  });

  return router;
}