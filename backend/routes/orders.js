// backend/routes/orders.js

import express from 'express';
import fetch from 'node-fetch';
import { customAlphabet } from 'nanoid';
import { Markup } from 'telegraf';
import Order from '../models/Order.js';

// --- –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ö–µ–ª–ø–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å ---

const ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
const generatePublicId = customAlphabet(ALPHABET, 7);

let cachedRate = null;
let lastFetched = 0;
const TTL = 60 * 60 * 1000; // 1 —á–∞—Å

async function getCnyRate() {
  const now = Date.now();
  if (cachedRate && now - lastFetched < TTL) return cachedRate;
  try {
    const res = await fetch("https://www.cbr-xml-daily.ru/daily_json.js");
    const data = await res.json();
    const cnyValute = data.Valute?.CNY;
    if (!cnyValute?.Value || typeof cnyValute.Value !== 'number') throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞ –æ—Ç –¶–ë");
    cachedRate = Math.round(((cnyValute.Value / cnyValute.Nominal) + 1) * 100) / 100;
    lastFetched = now;
    return cachedRate;
  } catch (err) {
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Sentry –∏–ª–∏ pino, –µ—Å–ª–∏ –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã
    return 14; // fallback
  }
}

function calculateFinalPrice(rawPoizonPrice, shipping, rate) {
  const fixedFee = process.env.PRICE_FIXED_FEE_RUB || 590;
  const deliveryFee = shipping === "air" ? (process.env.PRICE_DELIVERY_AIR_RUB || 800) : (process.env.PRICE_DELIVERY_STD_RUB || 400);
  return Math.round(Number(rawPoizonPrice) * rate + Number(fixedFee) + Number(deliveryFee));
}

function escapeMarkdown(text) {
  if (typeof text !== 'string') return '';
  const escapeChars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
  return text.replace(new RegExp(`[${escapeChars.join('\\')}]`, 'g'), '\\$&');
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Å–æ–∑–¥–∞—é—â–∞—è —Ä–æ—É—Ç–µ—Ä ---

// –ú—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (bot, logger) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä.
// –≠—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è Dependency Injection –∏ —è–≤–ª—è–µ—Ç—Å—è –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π.
export default function createOrderRouter({ bot, logger }) {
  const router = express.Router();

  // GET /api/orders - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  router.get('/', async (req, res) => {
    try {
      const userId = req.user.userId;
      const orders = await Order.find({ userId }).sort({ createdAt: -1 });
      res.json(orders);
    } catch (err) {
      logger.error({ err }, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤");
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // GET /api/orders/:id/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  router.get('/:id/status', async (req, res) => {
    const { id } = req.params; 
    const { userId } = req.user;
    try {
      const order = await Order.findOne({ publicId: id, userId: userId }, 'status');
      if (!order) return res.status(404).json({ error: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      res.json({ status: order.status });
    } catch (err) {
      logger.error({ err, publicId: id }, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞");
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // POST /api/orders - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
  router.post('/', async (req, res) => {
    const { rawPoizonPrice, shipping, link, category, address } = req.body;
    const { userId, username } = req.user;

    if (!rawPoizonPrice || !shipping || !link || !category || !address) {
      return res.status(400).json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
    }

    try {
      const currentRate = await getCnyRate();
      const finalPrice = calculateFinalPrice(rawPoizonPrice, shipping, currentRate);
      const newPublicId = generatePublicId();

      const savedOrder = await new Order({
        publicId: newPublicId,
        userId, username, price: finalPrice, rawPoizonPrice, category, shipping, link,
        status: "pending",
        deliveryType: address.deliveryType,
        city: address.city, street: address.street, fullName: address.name, phone: address.phone,
        pickupCode: address.pickupCode, pickupAddress: address.pickupAddress,
      }).save();

      const orderIdForCallback = savedOrder._id.toString();
      const safeUsername = escapeMarkdown(username || 'unknown');
      let addressBlock = address.deliveryType === 'pickup'
        ? `üìç *–î–æ—Å—Ç–∞–≤–∫–∞ –≤ –ü–í–ó:*\n–ì–æ—Ä–æ–¥: ${escapeMarkdown(address.city)}\n–ü—É–Ω–∫—Ç: ${escapeMarkdown(address.pickupAddress)}\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${escapeMarkdown(address.name)}, ${escapeMarkdown(address.phone)}`
        : `üöö *–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º:*\n–ì–æ—Ä–æ–¥: ${escapeMarkdown(address.city)}\n–ê–¥—Ä–µ—Å: ${escapeMarkdown(address.street)}\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${escapeMarkdown(address.name)}, ${escapeMarkdown(address.phone)}`;

      const messageText = `üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:*\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${safeUsername}\n` +
        `üìé –°—Å—ã–ª–∫–∞: ${escapeMarkdown(link)}\n` +
        `üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${escapeMarkdown(category)}\n` +
        `‚úàÔ∏è –î–æ—Å—Ç–∞–≤–∫–∞: ${escapeMarkdown(shipping)}\n` +
        `üí∞ *–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: ${finalPrice}‚ÇΩ*\n` +
        `üÜî ID: ${escapeMarkdown(savedOrder.publicId)}\n\n` +
        `${addressBlock}\n\n` +
        `*–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ*`;
      
      const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', `status_awaiting_payment_${orderIdForCallback}`)],
          [Markup.button.callback('–û–ø–ª–∞—á–µ–Ω', `status_paid_${orderIdForCallback}`)],
          [Markup.button.callback('–ï–¥–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥', `status_to_warehouse_${orderIdForCallback}`)],
          [Markup.button.callback('–ù–∞ —Å–∫–ª–∞–¥–µ', `status_at_warehouse_${orderIdForCallback}`)],
          [Markup.button.callback('–ï–¥–µ—Ç –≤ –ú–æ—Å–∫–≤—É', `status_to_moscow_${orderIdForCallback}`)],
          [Markup.button.callback('–í –ú–æ—Å–∫–≤–µ', `status_in_moscow_${orderIdForCallback}`)],
          [Markup.button.callback('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –°–î–≠–ö', `status_shipped_cdek_${orderIdForCallback}`)],
          [Markup.button.callback('–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ', `status_ready_for_pickup_${orderIdForCallback}`)],
          [
              Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', `status_completed_${orderIdForCallback}`),
              Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `status_rejected_${orderIdForCallback}`)
          ]
      ]);

      await bot.telegram.sendMessage(process.env.MANAGER_CHAT_ID, messageText, { parse_mode: 'MarkdownV2', ...keyboard });
      res.status(201).json({ success: true, id: savedOrder.publicId, calculatedPrice: finalPrice });

    } catch (err) {
      logger.error({ err }, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞");
      if (err.code === 11000) {
        return res.status(500).json({ success: false, error: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –∑–∞–∫–∞–∑–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." });
      }
      res.status(500).json({ success: false, error: "Internal Server Error" });
    }
  });

  return router;
}