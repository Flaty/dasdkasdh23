// index.js
import dotenv from "dotenv"
dotenv.config()

import User from './models/User.js';
import Order from './models/Order.js';
import UserAddress from "./models/UserAddress.js"
import CartItem from "./models/CartItem.js"

import express from "express"
import cors from "cors"
import bodyParser from "body-parser"
import mongoose from "mongoose"
import fetch from "node-fetch"
import { Telegraf, Markup } from "telegraf"

import cdekRoutes from "./routes/cdek.js"

// === –ù–ê–°–¢–†–û–ô–ö–ò ===
const BOT_TOKEN = process.env.BOT_TOKEN
const MANAGER_CHAT_ID = process.env.MANAGER_CHAT_ID

if (!BOT_TOKEN || !MANAGER_CHAT_ID) {
  console.error("‚ùå BOT_TOKEN –∏–ª–∏ MANAGER_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
  process.exit(1)
}

const bot = new Telegraf(BOT_TOKEN)
const app = express()

// === MONGODB ===
mongoose
  .connect("mongodb://127.0.0.1:27017/orders")
  .then(() => console.log("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"))
  .catch((err) => console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB", err))

// === –•–ï–õ–ü–ï–†–´ ===
function escapeMarkdown(text) {
  if (typeof text !== 'string') return '';
  const escapeChars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
  return text.replace(new RegExp(`[${escapeChars.join('\\')}]`, 'g'), '\\$&');
}

const statusLabels = {
  pending: "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
  awaiting_payment: "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
  paid: "–û–ø–ª–∞—á–µ–Ω, –≤—ã–∫—É–ø–∞–µ—Ç—Å—è",
  to_warehouse: "–ï–¥–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥",
  at_warehouse: "–ù–∞ —Å–∫–ª–∞–¥–µ",
  to_moscow: "–ï–¥–µ—Ç –≤ –ú–æ—Å–∫–≤—É",
  in_moscow: "–í –ú–æ—Å–∫–≤–µ",
  shipped_cdek: "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –°–î–≠–ö",
  ready_for_pickup: "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
  completed: "–ó–∞–≤–µ—Ä—à–µ–Ω",
  rejected: "–û—Ç–∫–ª–æ–Ω–µ–Ω",
};

// === MIDDLEWARE ===
app.use(cors())
app.use(bodyParser.json())

// === API ===
app.use("/api/cdek", cdekRoutes)

app.get("/api/orders", async (req, res) => {
  const userId = parseInt(req.query.userId)
  if (!userId) return res.status(400).json({ error: "userId required" })

  const orders = await Order.find({ userId }).sort({ createdAt: -1 })
  res.json(orders)
})

// === –ö–≠–® –ö–£–†–°–ê ===
let cachedRate = null
let lastFetched = 0
const TTL = 60 * 60 * 1000

async function fetchCnyRateFromCBR() {
  const res = await fetch("https://www.cbr-xml-daily.ru/daily_json.js")
  const data = await res.json()
  const raw = data.Valute?.CNY?.Value
  if (!raw || typeof raw !== "number") throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å")
  return Math.round((raw + 1) * 100) / 100
}

app.get("/api/rate", async (req, res) => {
  const now = Date.now()
  if (!cachedRate || now - lastFetched > TTL) {
    try {
      cachedRate = await fetchCnyRateFromCBR()
      lastFetched = now
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞:", err)
      return res.json({ rate: 14 }) // fallback
    }
  }
  res.json({ rate: cachedRate })
})

// === –ö–û–†–ó–ò–ù–ê ===
app.get("/api/cart", async (req, res) => {
  const { userId } = req.query
  if (!userId) return res.status(400).send("No userId")

  const items = await CartItem.find({ userId })
  res.json(items)
})

app.post("/api/cart", async (req, res) => {
  const { userId, link, category, shipping, price } = req.body
  if (!userId || !link) return res.status(400).send("Missing data")

  const newItem = new CartItem({ userId, link, category, shipping, price })
  await newItem.save()
  res.json({ success: true })
})

app.delete("/api/cart/:id", async (req, res) => {
  const { id } = req.params
  await CartItem.findByIdAndDelete(id)
  res.json({ success: true })
})

// === –ó–ê–ö–ê–ó ===
function calculateFinalPrice(rawPoizonPrice, shipping, rate = 14) {
  const fixedFee = 590
  const deliveryFee = shipping === "air" ? 800 : 400
  return Math.round(rawPoizonPrice * rate + fixedFee + deliveryFee)
}

// === –°–û–•–†–ê–ù–ï–ù–ò–ï –ê–î–†–ï–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
app.post("/api/user/address", async (req, res) => {
  const {
    userId, name, phone, city, city_code,
    street, deliveryType, pickupCode, pickupAddress,
  } = req.body

  if (!userId) return res.status(400).json({ error: "userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" })

  try {
    await UserAddress.findOneAndUpdate(
      { userId },
      { name, phone, city, city_code, street, deliveryType, pickupCode, pickupAddress },
      { upsert: true, new: true } // upsert: true —Å–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
    );
    res.json({ success: true })
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:", err)
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
  }
})

// === –ü–û–õ–£–ß–ï–ù–ò–ï –ê–î–†–ï–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
app.get("/api/user/address", async (req, res) => {
  const userId = parseInt(req.query.userId)
  if (!userId) return res.status(400).json({ error: "userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" })

  try {
    const address = await UserAddress.findOne({ userId })
    res.json(address || {})
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:", err)
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
  }
})

// === –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –î–õ–Ø –°–¢–†–ê–ù–ò–¶–´ –ü–†–û–§–ò–õ–Ø ===
app.get("/api/profile", async (req, res) => {
  const userId = parseInt(req.query.userId);
  if (!userId) return res.status(400).json({ error: "userId required" });

  try {
    const [lastOrder, allOrders, userAddress, dbUser] = await Promise.all([
      Order.findOne({ userId }).sort({ createdAt: -1 }),
      Order.find({ userId }),
      UserAddress.findOne({ userId }),
      User.findOneAndUpdate({ userId }, { $setOnInsert: { userId } }, { new: true, upsert: true })
    ]);

    const registrationDate = dbUser.createdAt;
    const daysInEcosystem = Math.floor((new Date() - new Date(registrationDate)) / (1000 * 60 * 60 * 24));

    const ordersCount = allOrders.length;
    const totalSpent = allOrders.reduce((sum, order) => sum + (order.price || 0), 0);

    let loyalty_status;
    if (ordersCount >= 10) {
      loyalty_status = { name: "Gold", icon: "ü•á", next_status_name: null, orders_to_next_status: 0, progress_percentage: 100, current_cashback_percent: 5, perks: ["+5% –∫—ç—à–±—ç–∫", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"] };
    } else if (ordersCount >= 5) {
      loyalty_status = { name: "Silver", icon: "ü•à", next_status_name: "Gold", orders_to_next_status: 10 - ordersCount, progress_percentage: ((ordersCount - 5) / 5) * 100, current_cashback_percent: 2, perks: ["+2% –∫—ç—à–±—ç–∫", "–†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ —Å–∫–∏–¥–∫–∞–º"] };
    } else {
      loyalty_status = { name: "Bronze", icon: "ü•â", next_status_name: "Silver", orders_to_next_status: 5 - ordersCount, progress_percentage: (ordersCount / 5) * 100, current_cashback_percent: 0, perks: ["–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫–∞–∑–∞–º"] };
    }

    const achievements = [
      { id: "first_purchase", name: "–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞", icon: "üçÜ", is_completed: ordersCount > 0 },
      { id: "five_orders", name: "5 –∑–∞–∫–∞–∑–æ–≤", icon: "üî•", is_completed: ordersCount >= 5 },
      { id: "spent_30k", name: "30k+ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ", icon: "üßæ", is_completed: totalSpent >= 30000 }
    ];

    const profileData = {
      days_in_ecosystem: daysInEcosystem,
      loyalty_status: loyalty_status,
      last_order: lastOrder ? { id: lastOrder.id, name: lastOrder.category, price: lastOrder.price, currency: "RUB",status: lastOrder.status, created_at: lastOrder.createdAt } : null,
      achievements: achievements,
      address: userAddress,
      referral_info: { link: `https://t.me/your_bot?start=ref${userId}`, is_active: true, bonus_per_friend: 500 }
    };

    res.json(profileData);
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è userId=${userId}:`, err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø—Ä–æ—Ñ–∏–ª—è" });
  }
});

app.post("/api/order", async (req, res) => {
  const { userId, username, rawPoizonPrice, shipping, link, category, address } = req.body;

  if (!rawPoizonPrice || !shipping || !link || !category || !address) {
    return res.status(400).json({ error: "Missing required fields" });
  }

  const finalPrice = calculateFinalPrice(rawPoizonPrice, shipping, cachedRate || 14);

  const order = new Order({
    id: Date.now().toString(),
    userId, username, price: finalPrice, category, shipping, link, status: "pending",
    deliveryType: address.deliveryType, city: address.city, street: address.street,
    fullName: address.name, phone: address.phone, pickupCode: address.pickupCode,
    pickupAddress: address.pickupAddress,
  });

  try {
    const savedOrder = await order.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º _id
    const orderIdForCallback = savedOrder._id.toString(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π _id

    const safeUsername = escapeMarkdown(username || 'unknown');
    const safeLink = escapeMarkdown(link);
    const safeCategory = escapeMarkdown(category);
    const safeShipping = escapeMarkdown(shipping);
    const safeCity = escapeMarkdown(address.city);
    const safePickupAddress = escapeMarkdown(address.pickupAddress);
    const safeStreet = escapeMarkdown(address.street);
    const safeName = escapeMarkdown(address.name);
    const safePhone = escapeMarkdown(address.phone);

    let addressBlock = '';
    if (address.deliveryType === 'pickup') {
      addressBlock = `üìç *–î–æ—Å—Ç–∞–≤–∫–∞ –≤ –ü–í–ó:*\n` + `–ì–æ—Ä–æ–¥: ${safeCity}\n` + `–ü—É–Ω–∫—Ç: ${safePickupAddress}\n` + `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${safeName}, ${safePhone}`;
    } else {
      addressBlock = `üöö *–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º:*\n` + `–ì–æ—Ä–æ–¥: ${safeCity}\n` + `–ê–¥—Ä–µ—Å: ${safeStreet}\n` + `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${safeName}, ${safePhone}`;
    }

    const messageText = `üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:*\n\n` + `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${safeUsername}\n` + `üìé –°—Å—ã–ª–∫–∞: ${safeLink}\n` + `üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${safeCategory}\n` + `‚úàÔ∏è –î–æ—Å—Ç–∞–≤–∫–∞: ${escapeMarkdown(shipping)}\n` + `üí∞ –¶–µ–Ω–∞: ${finalPrice}‚ÇΩ\n` + `üÜî ID: ${escapeMarkdown(savedOrder.id)}\n\n` + `${addressBlock}\n\n` + `*–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ*`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', `status_awaiting_payment_${orderIdForCallback}`)],
        [Markup.button.callback('–û–ø–ª–∞—á–µ–Ω', `status_paid_${orderIdForCallback}`)],
        [Markup.button.callback('–ï–¥–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥', `status_to_warehouse_${orderIdForCallback}`)],
        [Markup.button.callback('–ù–∞ —Å–∫–ª–∞–¥–µ', `status_at_warehouse_${orderIdForCallback}`)],
        [Markup.button.callback('–ï–¥–µ—Ç –≤ –ú–æ—Å–∫–≤—É', `status_to_moscow_${orderIdForCallback}`)],
        [Markup.button.callback('–í –ú–æ—Å–∫–≤–µ', `status_in_moscow_${orderIdForCallback}`)],
        [Markup.button.callback('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –°–î–≠–ö', `status_shipped_cdek_${orderIdForCallback}`)],
        [Markup.button.callback('–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ', `status_ready_for_pickup_${orderIdForCallback}`)],
        [
            Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', `status_completed_${orderIdForCallback}`),
            Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `status_rejected_${orderIdForCallback}`)
        ]
    ]);

    await bot.telegram.sendMessage(
      MANAGER_CHAT_ID,
      messageText,
      {
        parse_mode: 'MarkdownV2',
        ...keyboard
      }
    );

    res.json({ success: true, id: savedOrder.id });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, error: err.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});
bot.command('start', (ctx) => {
  const webAppUrl = process.env.WEBAPP_URL;

  if (!webAppUrl) {
    return ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
  }

  ctx.reply(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω.',
    Markup.inlineKeyboard([
      // –í–æ—Ç —Å–∞–º–∞ –∫–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç Web App
      Markup.button.webApp('üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', webAppUrl)
    ])
  );
});

// === CALLBACK ===
bot.on("callback_query", async (ctx) => {
  const data = ctx.callbackQuery.data;
  if (!data.startsWith('status_')) return ctx.answerCbQuery();

  // ‚úÖ –§–ò–ö–° –ó–î–ï–°–¨: –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º callback_data
  const parts = data.split("_");
  
  // –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ ID
  const orderId = parts[parts.length - 1]; 
  
  // –í—Å–µ, —á—Ç–æ –º–µ–∂–¥—É 'status' –∏ ID - —ç—Ç–æ –Ω–∞—à —Å—Ç–∞—Ç—É—Å
  const newStatus = parts.slice(1, -1).join('_');

  try {
    if (!mongoose.Types.ObjectId.isValid(orderId)) {
        console.error(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ObjectId: ${orderId} –∏–∑ callback_data: ${data}`);
        return ctx.answerCbQuery('‚ùóÔ∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞');
    }
      
    const order = await Order.findById(orderId);
    if (!order) return ctx.answerCbQuery("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ");

    order.status = newStatus;
    await order.save();

    const originalText = ctx.callbackQuery.message.text;
    const updatedText = originalText.replace(/\*–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:.*$/, `*–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${escapeMarkdown(statusLabels[newStatus] || newStatus)}*`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏—à–Ω–∏–π –∑–∞–ø—Ä–æ—Å
    if (updatedText !== originalText) {
        await ctx.editMessageText(updatedText, {
            parse_mode: 'MarkdownV2',
            ...ctx.callbackQuery.message.reply_markup
        });
    }

    ctx.answerCbQuery(`‚úÖ –°—Ç–∞—Ç—É—Å: ${statusLabels[newStatus]}`);
  } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞:', err);
      ctx.answerCbQuery('‚ùóÔ∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
  }
});

// === –ó–ê–ü–£–°–ö ===
(async () => {
  try {
    // –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º backend –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –∏ –±–æ—Ç–∞
    app.listen(3001, () => console.log("üöÄ –°–µ—Ä–≤–µ—Ä –Ω–∞ http://localhost:3001"));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:", err);
  }
})();